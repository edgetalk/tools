@wire(text-editor-inner {
  {
    env:shell-server-url | If(IsNone {"http://localhost:6666"} {ExpectString}) >= shell-server-url
    "/text_editor" | AppendTo(shell-server-url)
  }
  ToJson | Http.Post(shell-server-url Timeout: 30)
})

@wire(text_editor {
  Do(text-editor-inner)
})

{
  definition: {
    name: "text_editor"
    
    description: """Persistent File Editor

KEY FEATURES:
- view: line-numbered file contents OR dirs (output similar to ls command)
- Multiple replacement strategies for different needs

STR_REPLACE (Strict) REQUIREMENTS:
1. UNIQUE CONTEXT (PER CALL):
   - 5+ lines EXACT before/after context
   - Full whitespace/indentation
   - Exact target string match req
2. SINGLE-INSTANCE ONLY:
   - One replacement per call
   - Multiple=separate calls
3. PRE-CHECKS MANDATORY:
   - view to count matches
   - Capture unique context per instance

REPLACE_FIRST (Flexible) BEHAVIOR:
- Replaces only the first occurrence of the string
- Returns information about how many matches were found
- Useful for iterative replacements or when uniqueness is uncertain

STRUCTURED INSERT (Alternative):
- Line-numbers from view
- Use insert command with new_str and insert_line parameters

CRITICAL WARNINGS:
! str_replace fails on multi-matches
! All commands fail on whitespace mismatch
! Wrong context=wrong edit

BEST PRACTICES:
- Group file edits in single message
- Multiple replacement calls OK
- Use replace_first when uncertain about uniqueness

SAFETY PROTOCOLS:
ALWAYS:
- Verify match count first
- Capture 5+ lines before/after
- Include exact whitespace
- One change per call
NEVER:
- Assume unique matches
- Use partial context
- Batch replace"""
    parameters: {
      type: "object"
      properties: {
        command: {
          description: "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `replace_first`, `insert`."
          enum: ["view" "create" "str_replace" "replace_first" "insert"]
          type: "string"
        }
        file_text: {
          description: "Required parameter of `create` command, with the content of the file to be created."
          type: "string"
        }
        insert_line: {
          description: "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`. CANNOT use with `str_replace` or `replace_first` commands."
          type: "integer"
        }
        new_str: {
          description: "Optional parameter of `str_replace` and `replace_first` commands containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert."
          type: "string"
        }
        old_str: {
          description: "Required parameter of `str_replace` and `replace_first` commands containing the string in `path` to replace. For `str_replace`, must match exactly one location in the file."
          type: "string"
        }
        path: {
          description: "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`."
          type: "string"
        }
        view_range: {
          description: "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file."
          items: {"type": "integer"}
          type: "array"
        }
      }
      required: ["command" "path"]
    }
  }
  
  use: text_editor
}
