@wire(grep {
  ExpectTable = args
  args:pattern | ExpectString = pattern
  [(Apple.iCloudPath) "/" (args:file | ExpectString)] | String.Join = file-path
  ; args:file | ExpectString = file-path
  
  ; Optional parameters with defaults
  args:case_insensitive | If(Is(true) {true} {false}) = case-insensitive
  args:line_numbers | If(Is(true) {true} {false}) = line-numbers
  args:before_context | If(IsNone {0} {ExpectInt}) = before-context
  args:after_context | If(IsNone {0} {ExpectInt}) = after-context
  args:multiline | If(Is(true) {true} {false}) = multiline
  args:invert_match | If(Is(true) {true} {false}) = invert-match
  args:max_matches | If(IsNone {0} {ExpectInt}) = max-matches

  ; Call Grep with all parameters
  pattern | Grep(
    File: file-path
    CaseInsensitive: case-insensitive
    LineNumbers: line-numbers
    BeforeContext: before-context
    AfterContext: after-context
    MultiLine: multiline
    InvertMatch: invert-match
    MaxMatches: max-matches
  ) = results
  
  results | Map({
    $0 | ExpectTable = match-info
    
    match-info:line | ExpectString = line-text
    match-info:file | ExpectString = file-name
    
    "" >= entry
    
    ; Add line number if available
    If({match-info:line_number | IsInt} {
      match-info:line_number | ExpectInt | ToString | AppendTo(entry)
      ": " | AppendTo(entry)
    })
    line-text | AppendTo(entry)
    
    entry
  })
})

{
  definition: {
    name: "grep"
    description: """Search for regex patterns in files using powerful ripgrep functionality.

The grep tool allows you to search for text patterns in files using regular expressions. It supports various options for case sensitivity, line numbers, context lines, multiline matching, and more.

Basic usage:
- pattern: The regex pattern to search for
- file: The file path to search in

Options:
- case_insensitive (bool): Enable case-insensitive search (default: false)
- line_numbers (bool): Include line numbers in results (default: true)
- before_context (int): Number of lines to show before each match (default: 0)
- after_context (int): Number of lines to show after each match (default: 0)
- multiline (bool): Enable multiline pattern matching where . matches newlines (default: false)
- invert_match (bool): Show lines that don't match the pattern (default: false)
- max_matches (int): Maximum number of matches to return, 0 = unlimited (default: 0)

Returns:
A sequence of formatted strings, one per match/context line.
- With line_numbers (default): "line_number: line_text"
- Without line_numbers: "line_text"

Examples:

1. Simple search:
{
  "pattern": "function",
  "file": "src/main.js"
}

2. Case-insensitive search with context:
{
  "pattern": "error",
  "file": "logs/app.log",
  "case_insensitive": true,
  "before_context": 2,
  "after_context": 2
}

3. Multiline pattern search:
{
  "pattern": "class.*\\{[\\s\\S]*?constructor",
  "file": "src/App.js",
  "multiline": true
}

4. Limit results:
{
  "pattern": "TODO",
  "file": "src/utils.js",
  "max_matches": 10
}
"""
    parameters: {
      type: "object"
      properties: {
        pattern: {
          type: "string"
          description: "The regex pattern to search for"
        }
        file: {
          type: "string"
          description: "The file path to search in"
        }
        case_insensitive: {
          type: "boolean"
          description: "Enable case-insensitive search (default: false)"
        }
        line_numbers: {
          type: "boolean"
          description: "Include line numbers in results (default: true)"
        }
        before_context: {
          type: "integer"
          description: "Number of lines to show before each match (default: 0)"
        }
        after_context: {
          type: "integer"
          description: "Number of lines to show after each match (default: 0)"
        }
        multiline: {
          type: "boolean"
          description: "Enable multiline pattern matching (default: false)"
        }
        invert_match: {
          type: "boolean"
          description: "Show lines that don't match the pattern (default: false)"
        }
        max_matches: {
          type: "integer"
          description: "Maximum number of matches to return, 0 = unlimited (default: 0)"
        }
      }
      required: ["pattern" "file"]
    }
  }
  
  use: grep
}

; {
;   pattern: "email|flight"
;   file: "../README.md"
;   case_insensitive: true
;   line_numbers: true
; } | Do(grep) | Log
