@wire(text-editor-inner {
  {
    env:shell-server-url | If(IsNone {"http://localhost:6666"} {ExpectString}) >= shell-server-url
    "/text_editor" | AppendTo(shell-server-url)
  }
  ToJson | Http.Post(shell-server-url Timeout: 30)
})

@wire(text_editor {
  Do(text-editor-inner)
})

{
  definition: {
    name: "file_edit"
    
    description: """This is a tool for editing files. For moving or renaming files, you should generally use the Bash tool with the 'mv' command instead. For larger edits, use the Write tool to overwrite files.

Before using this tool:

1. Use the file_view tool to understand the file's contents and context

2. Make sure the file path is correct and absolute

To make a file edit, provide the following:
1. file_path: The absolute path to the file to modify (must be absolute, not relative)
2. old_string: The text to replace (must be unique within the file, and must match the file contents exactly, including all whitespace and indentation)
3. new_string: The edited text to replace the old_string

The tool will replace ONE occurrence of old_string with new_string in the specified file.

CRITICAL REQUIREMENTS FOR USING THIS TOOL:

1. UNIQUENESS: The old_string MUST uniquely identify the specific instance you want to change. This means:
   - Include AT LEAST 3-5 lines of context BEFORE the change point
   - Include AT LEAST 3-5 lines of context AFTER the change point
   - Include all whitespace, indentation, and surrounding code exactly as it appears in the file

2. SINGLE INSTANCE: This tool can only change ONE instance at a time. If you need to change multiple instances:
   - Make separate calls to this tool for each instance
   - Each call must uniquely identify its specific instance using extensive context

3. VERIFICATION: Before using this tool:
   - Check how many instances of the target text exist in the file
   - If multiple instances exist, gather enough context to uniquely identify each one
   - Plan separate tool calls for each instance

WARNING: If you do not follow these requirements:
   - The tool will fail if old_string matches multiple locations
   - The tool will fail if old_string doesn't match exactly (including whitespace)
   - You may change the wrong instance if you don't include enough context

When making edits:
   - Ensure the edit results in idiomatic, correct code
   - Do not leave the code in a broken state
   - Always use absolute file paths (starting with /)

If you want to create a new file, use:
   - A new file path, including dir name if needed
   - An empty old_string
   - The new file's contents as new_string

Remember: when making multiple file edits in a row to the same file, you should prefer to send all edits in a single message with multiple calls to this tool, rather than multiple messages with a single call each."""
    parameters: {
      type: "object"
      properties: {
        command: {
          description: "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`."
          enum: ["view" "create" "str_replace" "insert" "undo_edit"]
          type: "string"
        }
        file_text: {
          description: "Required parameter of `create` command, with the content of the file to be created."
          type: "string"
        }
        insert_line: {
          description: "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`."
          type: "integer"
        }
        new_str: {
          description: "Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert."
          type: "string"
        }
        old_str: {
          description: "Required parameter of `str_replace` command containing the string in `path` to replace. Must match exactly one location in the file."
          type: "string"
        }
        path: {
          description: "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`."
          type: "string"
        }
        view_range: {
          description: "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file."
          items: {"type": "integer"}
          type: "array"
        }
      }
      required: ["command" "path"]
    }
  }
  
  use: text_editor
}
