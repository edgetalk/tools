@wire(apply-patch {
  Take("patch") | ExpectString
  Codex.ApplyPatch(WorkDir: (Apple.iCloudPath)) = apply-patch-result
  apply-patch-result:success | ExpectBool = success
  If({success} {
      apply-patch-result:changes | ExpectTable
      ForEach({
        $0 | ExpectString = path
        $1 | ExpectTable = change-table
        change-table:type | ExpectString
        Match([
          "add" {
            change-table:content | ExpectString = apply-patch-content
            path | FS.Write(apply-patch-content Overwrite: true)
          }
          "update" {
            change-table:new_content | ExpectString = apply-patch-content
            path | FS.Write(apply-patch-content Overwrite: true)
          }
          "delete" {
            path | FS.Remove
          }
        ])
      })
      {
        success: true
      } | ExpectTable
    } {
      {
        success: false
        error: (apply-patch-result:error | ExpectString)
      } | ExpectTable
    }
  )
})

{
  definition: {
    name: "apply_patch"
    description: """Use the `apply_patch` shell command to edit files.
Your patch language is a stripped‑down, file‑oriented diff format designed to be easy to parse and safe to apply. You can think of it as a high‑level envelope:

*** Begin Patch
[ one or more file sections ]
*** End Patch

Within that envelope, you get a sequence of file operations.
You MUST include a header to specify the action you are taking.
Each operation starts with one of three headers:

*** Add File: <path> - create a new file. Every following line is a + line (the initial contents).
*** Delete File: <path> - remove an existing file. Nothing follows.
*** Update File: <path> - patch an existing file in place.

Then one or more "hunks". Each hunk MUST start with @@ (with or without navigation text):

1. **@@ alone** (most common, no specific navigation needed):
   *** Update File: file.txt
   @@
    context line
   - old line
   + new line

2. **@@ navigation text** (when you need to specify location in file):
   *** Update File: file.txt
   @@ class MyClass
    context line
   - old line
   + new line

CRITICAL: Every hunk must start with @@. Use @@ alone for most changes. Only add navigation text after @@ when 3 lines of context isn't enough to uniquely identify the location.

CRITICAL: EVERY SINGLE LINE in a hunk MUST start with a prefix character - NO EXCEPTIONS!

CRITICAL: CONTEXT LINES MUST START WITH A LITERAL SPACE CHARACTER ' ' - NOT NO PREFIX!

Within a hunk each line starts with:
  ' ' (a single space character) for unchanged context lines that help locate the change,
  '-' for lines being removed,
  '+' for lines being added.

After "*** Update File: path", you MUST start with @@ followed by the hunk lines (each with a prefix). There are no unprefixed lines allowed.

Context Guidelines:
- By default, include 3 lines of context before and after each change
- Context lines help locate the exact position of changes in the file
- If changes are within 3 lines of each other, don't duplicate context between them
- Context lines are REQUIRED unless the change is at the very beginning/end of the file

CRITICAL: To change existing content, you MUST use BOTH - and + prefixes:
- First show the old line with "-" prefix (what to remove)
- Then show the new line with "+" prefix (what to add)

COMMON MISTAKE: Never show only "+" without the corresponding "-" when changing existing lines!

Simple hunk format (always needs @@):
*** Update File: file.txt
@@
 unchanged_context_line_1     <- Note: starts with space ' '
 unchanged_context_line_2     <- Note: starts with space ' '
 unchanged_context_line_3     <- Note: starts with space ' '
- old_line_being_changed      <- Note: starts with minus '-'
+ new_line_replacement        <- Note: starts with plus '+'
 unchanged_context_line_after_1    <- Note: starts with space ' '
 unchanged_context_line_after_2    <- Note: starts with space ' '
 unchanged_context_line_after_3    <- Note: starts with space ' '

Correct example - changing existing text:
*** Update File: file.txt
@@
 some context before           <- Note: starts with space ' '
 another context line          <- Note: starts with space ' '
- old text that needs changing <- Note: starts with minus '-'
+ new text replacement         <- Note: starts with plus '+'
 context line after            <- Note: starts with space ' '
 more context after            <- Note: starts with space ' '

MOST COMMON MISTAKE - Context lines without space prefix:

WRONG - This will fail with "Unexpected line found":
*** Update File: file.txt
@@
def function():    <-- ERROR: No space prefix!
    old code
- old line
+ new line

RIGHT - Context lines MUST have space prefix:
*** Update File: file.txt
@@
 def function():    <-- CORRECT: Space prefix!
     old code
- old line
+ new line

ONLY use @@ headers when context alone is insufficient:

@@ class BaseClass
 context_line_1
 context_line_2
 context_line_3
- old_code_to_replace
+ new_code_replacement
 context_line_after_1
 context_line_after_2
 context_line_after_3

For deeply nested contexts, use multiple @@ statements:

@@ class BaseClass
@@      def method():
 context_line_1
 context_line_2
 context_line_3
- old_code_to_replace
+ new_code_replacement
 context_line_after_1
 context_line_after_2
 context_line_after_3

Multiple hunks in the same file:
*** Update File: example.py
 def first_function():
-    old_code_1
+    new_code_1
    pass

 class MyClass:
     def __init__(self):
-        old_code_2
+        new_code_2

The full grammar definition is below:
Patch := Begin { FileOp } End
Begin := "*** Begin Patch" NEWLINE
End := "*** End Patch" NEWLINE
FileOp := AddFile | DeleteFile | UpdateFile
AddFile := "*** Add File: " path NEWLINE { "+" line NEWLINE }
DeleteFile := "*** Delete File: " path NEWLINE
UpdateFile := "*** Update File: " path NEWLINE { Hunk }
Hunk := "@@" [ header ] NEWLINE { HunkLine } [ "*** End of File" NEWLINE ]
HunkLine := (" " | "-" | "+") text NEWLINE

A full patch can combine several operations:

*** Begin Patch
*** Add File: hello.txt
+Hello world
*** Update File: src/app.py
@@
 def greet():
     return 42

-print("Hi")
+print("Hello, world!")

 def main():
     pass
*** Delete File: obsolete.txt
*** End Patch

It is important to remember:

- You must include a header with your intended action (Add/Delete/Update)
- You must prefix new lines with `+` even when creating a new file
- When changing existing lines, ALWAYS use both `-` (remove) and `+` (add) prefixes
- File references can only be relative, NEVER ABSOLUTE.
"""
    parameters: {
      type: "object"
      properties: {
        patch: {
          type: "string"
          description: "The patch to apply."
        }
      }
      required: ["patch"]
    }
  }
  
  use: apply-patch
}
