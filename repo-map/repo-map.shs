@wire(repo-map-inner {
  {
    env:shell-server-url | If(IsNone {"http://localhost:6666"} {ExpectString}) >= shell-server-url
    "/repo-map" | AppendTo(shell-server-url)
  }
  ToJson | Http.Post(shell-server-url Timeout: 30)
})

@wire(repo_map {
  Do(repo-map-inner)
})

{
  definition: {
    name: "repo_map"
    
    description: """Repository Code Structure Mapper

OVERVIEW:
Generates a comprehensive map of your codebase using git and tree-sitter to extract:
- Classes, structs, enums, traits, interfaces
- Functions, methods, constructors, destructors  
- Line numbers and signatures for all code constructs

SUPPORTED LANGUAGES:
- Python: classes, functions, methods, async functions
- Rust: structs, enums, traits, impl blocks, functions, async functions
- C++: classes, structs, constructors, destructors, methods, global functions
- JavaScript/TypeScript: classes, functions, methods, arrow functions
- Java: classes, interfaces, methods, constructors
- Go: structs, interfaces, functions, methods
- C: structs, functions

REQUIREMENTS:
- Must be run in a git repository (uses git ls-files)
- tree-sitter and language parsers must be installed
- See installation instructions in shell_server_cross_platform.py

OUTPUT FORMAT:
üìÅ filename.ext (language)
----------------------------------------
  üèõÔ∏è L123: class ClassName
  ‚ö° L456: function_name(params)
  üîß L789: struct StructName

USAGE EXAMPLES:
- Current directory: repo_map({})
- Specific path: repo_map({"path": "/path/to/repo"})
- Relative path: repo_map({"path": "../other-repo"})
- Home directory: repo_map({"path": "~/projects/myrepo"})"""

    parameters: {
      type: "object"
      properties: {
        path: {
          description: "Path to the repository to map. Can be absolute (/path/to/repo), relative (../repo), or use tilde (~user/repo). If not provided, uses current working directory."
          type: "string"
        }
      }
      required: []
    }
  }
  
  use: repo_map
}